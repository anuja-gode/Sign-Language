pipeline {
  agent any
  environment {
    ECR_REPOSITORY = credentials('ECR_REPOSITORY')
    AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
    AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    IMAGE_NAME = 'my-docker-image'
  }

  stages {
    stage('Continuous Integration') {
      steps {
        script {
          echo "Linting repository"
          echo "Running unit tests"
        }
      }
    }

    stage('Login to ECR') {
      steps {
        script {
          sh 'aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.eu-north-1.amazonaws.com'
        }
      }
    }

    stage('Build Image') {
      steps {
        script {
          sh 'docker build -t ${ECR_REPOSITORY}:latest .'
        }
      }
    }

    stage('Push Image') {
      steps {
        script {
          sh 'docker push ${ECR_REPOSITORY}:latest'
        }
      }
    }

    stage('Continuous Deployment') {
      steps {
        sshagent(['ssh_key']) {
          script {
            echo "Deploying to remote server"
            sh '''
            ssh -o StrictHostKeyChecking=no -l ubuntu 13.49.184.78 << EOF
            cd /home/ubuntu/
            echo "Downloading docker-compose files"
            wget https://raw.githubusercontent.com/anuja-gode/Sign-Language/main/docker-compose.yml
            wget https://raw.githubusercontent.com/anuja-gode/Sign-Language/main/docker-compose.elk.yml
            echo "Logging in to ECR from remote server"
            export IMAGE_NAME=${ECR_REPOSITORY}:latest
            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.eu-north-1.amazonaws.com
            echo "Starting Docker services"
            docker-compose -f docker-compose.yml -f docker-compose.elk.yml up -d
            EOF
            '''
          }
        }
      }
    }
  }

  post {
    always {
      script {
        echo "Cleaning up Docker system"
        sh 'docker system prune -f'
      }
    }
  }
}